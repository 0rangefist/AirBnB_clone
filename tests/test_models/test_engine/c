#!/usr/bin/python3

import unittest
import json
import os
from models.base_model import BaseModel
from models.user import User
from models.state import State
from models.city import City
from models.place import Place
from models.amenity import Amenity
from models.review import Review
from models.engine.file_storage import FileStorage


class FileStorageTestCase(unittest.TestCase):
    """
    Unit tests for the FileStorage class
    """

    def setUp(self):
        """
        Set up the test environment
        """
        self.storage = FileStorage()
        self.storage.reload()

    def tearDown(self):
        """
        Clean up the test environment
        """
        self.storage.save()

    def test_all_empty(self):
        """
        Test the all() method when __objects is empty
        """
        objects = self.storage.all()
        self.assertEqual(objects, {})

    def test_new_multiple_instances(self):
        """
        Test the new() method with multiple instances of the same class
        """
        # Create multiple instances of BaseModel
        base_model1 = BaseModel()
        base_model2 = BaseModel()

        # Add the instances using the new() method
        self.storage.new(base_model1)
        self.storage.new(base_model2)

        # Verify that all instances are added with unique keys
        self.assertIn(f"BaseModel.{base_model1.id}", self.storage.all())
        self.assertIn(f"BaseModel.{base_model2.id}", self.storage.all())

    def test_save_and_reload_no_modification(self):
        """
        Test saving and reloading without modifying any objects
        """
        # Create instances of different models
        user = User()
        state = State()
        city = City()

        # Add the instances using the new() method
        self.storage.new(user)
        self.storage.new(state)
        self.storage.new(city)

        # Save the objects to the JSON file
        self.storage.save()

        # Create a new FileStorage instance and reload from the JSON file
        new_storage = FileStorage()
        new_storage.reload()

        # Verify that the reloaded objects match the original objects
        self.assertEqual(new_storage.all()["User." + user.id].to_dict(), user.to_dict())
        self.assertEqual(new_storage.all()["State." + state.id].to_dict(), state.to_dict())
        self.assertEqual(new_storage.all()["City." + city.id].to_dict(), city.to_dict())

    def test_save_and_reload_empty_file(self):
        """
        Test saving and reloading with an empty JSON file
        """
        # Create an empty JSON file
        with open("empty_file.json", "w") as json_file:
            json.dump({}, json_file)

        # Create a new FileStorage instance and reload from the empty JSON file
        new_storage = FileStorage()
        new_storage.reload()

        # Verify that __objects is empty after reloading
        self.assertEqual(new_storage.all(), {})

        # Remove the empty JSON file
        os.remove("empty_file.json")

    def test_save_and_reload_invalid_file(self):
        """
        Test saving and reloading with invalid JSON file content
        """
        # Create a JSON file with invalid content
        with open("invalid_file.json", "w") as json_file:
            json_file.write("invalid content")

        # Create a new FileStorage instance and reload from the invalid JSON file
        new_storage = FileStorage()
        new_storage.reload()

        # Verify that __objects is empty or has the expected state after reloading
        self.assertEqual(new_storage.all(), {})

        # Remove the invalid JSON file
        os.remove("invalid_file.json")

    def test_save_and_reload_incomplete_data(self):
        """
        Test saving and reloading with incomplete object data
        """
        # Create an instance of BaseModel
        base_model = BaseModel()
        base_model.name = "Test Model"

        # Remove a required attribute to create incomplete data
        del base_model.created_at

        # Add the modified instance using the new() method
        self.storage.new(base_model)

        # Save the object to the JSON file
        self.storage.save()

        # Create a new FileStorage instance and reload from the JSON file
        new_storage = FileStorage()
        new_storage.reload()

        # Verify that the reloaded object is not added to __objects
        self.assertNotIn(f"BaseModel.{base_model.id}", new_storage.all())

    def test_save_and_reload_multiple_models(self):
        """
        Test saving and reloading with multiple types of models
        """
        # Create instances of different models
        user = User()
        state = State()
        city = City()

        # Add the instances using the new() method
        self.storage.new(user)
        self.storage.new(state)
        self.storage.new(city)

        # Save the objects to the JSON file
        self.storage.save()

        # Create a new FileStorage instance and reload from the JSON file
        new_storage = FileStorage()
        new_storage.reload()

        # Verify that the reloaded objects match the original objects
        self.assertEqual(new_storage.all()["User." + user.id].to_dict(), user.to_dict())
        self.assertEqual(new_storage.all()["State." + state.id].to_dict(), state.to_dict())
        self.assertEqual(new_storage.all()["City." + city.id].to_dict(), city.to_dict())

    def test_save_and_reload_large_number_of_objects(self):
        """
        Test saving and reloading with a large number of objects
        """
        num_objects = 1000  # Number of objects to create

        # Create instances of BaseModel
        for i in range(num_objects):
            base_model = BaseModel()
            self.storage.new(base_model)

        # Save the objects to the JSON file
        self.storage.save()

        # Create a new FileStorage instance and reload from the JSON file
        new_storage = FileStorage()
        new_storage.reload()

        # Verify that the reloaded objects match the original objects
        for obj_id, base_model in new_storage.all().items():
            self.assertEqual(base_model.id, obj_id.split(".")[1])

    def test_save_and_reload_special_characters(self):
        """
        Test saving and reloading with special characters in attribute values
        """
        # Create an instance of BaseModel with special characters in attribute values
        base_model = BaseModel()
        base_model.name = 'Special "Name"'
        base_model.description = 'Special\nDescription'

        # Add the instance using the new() method
        self.storage.new(base_model)

        # Save the object to the JSON file
        self.storage.save()

        # Create a new FileStorage instance and reload from the JSON file
        new_storage = FileStorage()
        new_storage.reload()

        # Verify that the reloaded object has the same attribute values
        reloaded_base_model = new_storage.all()["BaseModel." + base_model.id]
        self.assertEqual(reloaded_base_model.name, base_model.name)
        self.assertEqual(reloaded_base_model.description, base_model.description)

    def test_save_and_reload_with_custom_methods(self):
        """
        Test saving and reloading with objects that have custom methods
        """
        # Create an instance of BaseModel with a custom method
        class CustomModel(BaseModel):
            def custom_method(self):
                return "Custom method"

        custom_model = CustomModel()
        self.storage.new(custom_model)

        # Save the object to the JSON file
        self.storage.save()

        # Create a new FileStorage instance and reload from the JSON file
        new_storage = FileStorage()
        new_storage.reload()

        # Verify that the reloaded object has the custom method intact
        reloaded_custom_model = new_storage.all()["CustomModel." + custom_model.id]
        self.assertEqual(reloaded_custom_model.custom_method(), "Custom method")


    def test_new_instance_added(self):
        # Create a new instance of BaseModel
        base_model = BaseModel()
        base_model.name = "Test Model"
        self.storage.new(base_model)

        # Verify that the new instance is added to __objects
        self.assertIn(f"BaseModel.{base_model.id}", self.storage.all())

    def test_save_and_reload(self):
        # Create instances of different models
        user = User()
        state = State()
        city = City()
        place = Place()
        amenity = Amenity()
        review = Review()

        # Set some attributes for the instances
        user.name = "John"
        state.name = "California"
        city.name = "Los Angeles"
        place.name = "Beach House"
        amenity.name = "Pool"
        review.text = "Great experience!"

        # Add the instances to __objects
        self.storage.new(user)
        self.storage.new(state)
        self.storage.new(city)
        self.storage.new(place)
        self.storage.new(amenity)
        self.storage.new(review)

        # Save the instances to the JSON file
        self.storage.save()

        # Create a new storage instance and reload from the JSON file
        new_storage = FileStorage()
        new_storage.reload()

        # Verify that the instances are loaded back correctly
        self.assertEqual(new_storage.all()["User." + user.id].name, "John")
        self.assertEqual(new_storage.all()["State." + state.id].name, "California")
        self.assertEqual(new_storage.all()["City." + city.id].name, "Los Angeles")
        self.assertEqual(new_storage.all()["Place." + place.id].name, "Beach House")
        self.assertEqual(new_storage.all()["Amenity." + amenity.id].name, "Pool")
        self.assertEqual(new_storage.all()["Review." + review.id].text, "Great experience!")


if __name__ == '__main__':
    unittest.main()

