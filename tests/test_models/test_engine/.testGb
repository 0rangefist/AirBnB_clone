#!/usr/bin/python3
"""Unittest module for the FileStorage class."""

import unittest
from datetime import datetime
import time
from models.base_model import BaseModel
from models.engine.file_storage import FileStorage
from models import storage
import re
import json
import os


class TestFileStorage(unittest.TestCase):
    """Test Cases for the FileStorage class."""

    def setUp(self):
        """Sets up test methods."""
        pass

    def resetStorage(self):
        """Resets FileStorage data."""
        FileStorage._FileStorage__objects = {}
        if os.path.isfile(FileStorage._FileStorage__file_path):
            os.remove(FileStorage._FileStorage__file_path)

    def tearDown(self):
        """Tears down test methods."""
        self.resetStorage()
        pass

    def test_5_instantiation(self):
        """Tests instantiation of storage class."""
        self.assertEqual(type(storage).__name__, "FileStorage")

    def test_3_init_no_args(self):
        """Tests __init__ with no arguments."""
        self.resetStorage()
        with self.assertRaises(TypeError) as e:
            FileStorage.__init__()
        msg = "descriptor '__init__' of 'object' object needs an argument"
        self.assertEqual(str(e.exception), msg)

    def test_5_attributes(self):
        """Tests class attributes."""
        self.resetStorage()
        self.assertTrue(hasattr(FileStorage, "_FileStorage__file_path"))
        self.assertTrue(hasattr(FileStorage, "_FileStorage__objects"))
        self.assertEqual(getattr(FileStorage, "_FileStorage__objects"), {})

    def test_6_save_object(self):
        """Tests saving an object to storage."""
        self.resetStorage()
        obj = BaseModel()
        obj.save()
        key = "{}.{}".format(obj.__class__.__name__, obj.id)
        self.assertTrue(key in FileStorage._FileStorage__objects)

    def test_7_reload_objects(self):
        """Tests reloading objects from storage."""
        self.resetStorage()
        obj1 = BaseModel()
        obj1.save()
        obj2 = BaseModel()
        obj2.save()
        storage.reload()
        key1 = "{}.{}".format(obj1.__class__.__name__, obj1.id)
        key2 = "{}.{}".format(obj2.__class__.__name__, obj2.id)
        self.assertTrue(key1 in FileStorage._FileStorage__objects)
        self.assertTrue(key2 in FileStorage._FileStorage__objects)

    def test_9_file_created(self):
        """Tests if the file is created after saving an object."""
        self.resetStorage()
        obj = BaseModel()
        obj.save()
        self.assertTrue(os.path.isfile(FileStorage._FileStorage__file_path))
    
    def test_new_method(self):
        """Tests the new() method in FileStorage"""
        storage = FileStorage()
        obj = BaseModel()
        storage.new(obj)

        # Check if the object is added to __objects correctly
        key = f"{obj.__class__.__name__}.{obj.id}"
        self.assertIn(key, storage.all())

        # Check if the added object is the same as the original object
        added_obj = storage.all()[key]
        self.assertIs(obj, added_obj)

if __name__ == '__main__':
    unittest.main()
